/* Can this be done?
void test_sort(func function, (array1, arrayTitle1), (array2, arrayTitle2)
		(array3, arrayTitle3))	{

	map	{		// for each tuple, do the following with the given function.
		reset_arrays();

		GetLocalTime(&start);
		function(array);
		print_performance(arrayTitle);
		is_sorted(array, arrayTitle);
		GetLocalTime(&end);
	}
}

// Things should then look like this, instead of how they are:
// My sorts
test_sort(insertion, (increasing, "Insertion - Increasing"), 
					 (decreasing, "Insertion - Decreasing"),
					 (random, "Insertion - Random"));
test_sort(selection, (increasing, "Selection - Increasing"), 
					 (decreasing, "Selection - Decreasing"),
					 (random, "Selection - Random"));
test_sort(quick, (increasing, "Quick Sort - Increasing"), 
					 (decreasing, "Quick Sort - Decreasing"),
					 (random, "Quick Sort - Random"));

// Template sorts
test_sort(selection_sort, (increasing, "Template Selection Sort - Increasing"), 
					 (decreasing, "Template Selection Sort - Decreasing"),
					 (random, "Template Selection Sort - Random"));
*/

/*
That could be simplified to a single function:
void test_all( (function, "function_title"), ...);

test_all(	(insertion, "Insertion"), 
			(selection, "Selection")
			(quick, "Quick Sort")
			(selection_sort, "Template Selection Sort")
		)	{
	for_each ($arg)	{
		test_sort($argFunction, (increasing, "$argTitle - Increasing"),
					(decreasing, "$argTitle - Decreasing"),
					 (random, "$argTitle - Random"));
	}
}


Wonder how this could be done and why I can't minimize this comment 
(^ From when this comment was in a header file, and had no minimize option).



*/


Stuff written while figuring out how to make this idea work.

/*
Creates two function objects - type(void), input(type*)
Create tuples holding functions and their Titles.

Create vector holding tuples.

Test first function object with testCases vector.

Iterate through the vector containing the functions
Each function acts on a singular array from the testCases vector
test outputting the title of the function from the function vector
/*
	mod1 random1;
	mod2 random2;
	tuple<function<void(int*)>,string> hold_random1(random1, "random1");
	tuple<function<void(int*)>,string> hold_random2(random1, "random2");

	vector<tuple<function<void(int*)>, string>> thing_test;
	thing_test.push_back(hold_random1);
	thing_test.push_back(hold_random2);

	random1(get<0>(testCases[0]));

	for(auto i = thing_test.begin(); i != thing_test.end(); ++i)	{
		// Get left side of tuple (the function) from position i in vector
		// have function work on test case.
		get<0>(*i)(get<0>(testCases[1]));
		cout << get<1>(*i) << endl;
	}
/**/



	// While this code is simplified... 
	//		It looks somewhat cryptic, doesn't it?
//	for (auto inputCase = testCases.begin(); inputCase != testCases.end(); ++inputCase)	{
//		test_function(s_selection, "Selection", *inputCase);
//	}


	/*
	std::cout << "Time tracking is done in minutes:seconds:milliseconds."
		<< std::endl;
	 
	std::cout << "\nInsertion Sort:";
	test_insertion();
	
	std::cout << "\n\nSelection Sort:";
	test_selection();
	
	std::cout << "\n\nTemplate Selection Sort:";
	test_template_selection();
	
	std::cout << "\n\nQuick Sort:";
	test_quick();
	*/