/* Can this be done?
void test_sort(func function, (array1, arrayTitle1), (array2, arrayTitle2)
		(array3, arrayTitle3))	{

	map	{		// for each tuple, do the following with the given function.
		reset_arrays();

		GetLocalTime(&start);
		function(array);
		print_performance(arrayTitle);
		is_sorted(array, arrayTitle);
		GetLocalTime(&end);
	}
}

// Things should then look like this, instead of how they are:
// My sorts
test_sort(insertion, (increasing, "Insertion - Increasing"), 
					 (decreasing, "Insertion - Decreasing"),
					 (random, "Insertion - Random"));
test_sort(selection, (increasing, "Selection - Increasing"), 
					 (decreasing, "Selection - Decreasing"),
					 (random, "Selection - Random"));
test_sort(quick, (increasing, "Quick Sort - Increasing"), 
					 (decreasing, "Quick Sort - Decreasing"),
					 (random, "Quick Sort - Random"));

// Template sorts
test_sort(selection_sort, (increasing, "Template Selection Sort - Increasing"), 
					 (decreasing, "Template Selection Sort - Decreasing"),
					 (random, "Template Selection Sort - Random"));
*/

/*
That could be simplified to a single function:
void test_all( (function, "function_title"), ...);

test_all(	(insertion, "Insertion"), 
			(selection, "Selection")
			(quick, "Quick Sort")
			(selection_sort, "Template Selection Sort")
		)	{
	for_each ($arg)	{
		test_sort($argFunction, (increasing, "$argTitle - Increasing"),
					(decreasing, "$argTitle - Decreasing"),
					 (random, "$argTitle - Random"));
	}
}


Wonder how this could be done and why I can't minimize this comment 
(^ From when this comment was in a header file, and had no minimize option).



*/